library(htmlwidgets)
library(widgetframe)
library(utils)
library(lubridate)
theme_set(theme_classic())
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",
na.strings = "", fileEncoding = "UTF-8-BOM")
colnames(data)
lbls <- paste0(month.abb[month(data$date)], " ", lubridate::year(data$date))
brks <- data$date
typeof(data$dateRep)
g <- ggplot(data, aes(x=as.Date(dateRep))) +
geom_line(aes(y=cases)) +
labs(title="Cases over time",
caption="Source: EUCDC",
y="Cases")
# + #Title & Caption
#   scale_x_date(labels = lbls,
#                breaks = brks)
p <- plotly::ggplotly(g)
widget_file_size <- function(p) {
d <- tempdir()
withr::with_dir(d, htmlwidgets::saveWidget(p, "index.html"))
f <- file.path(d, "index.html")
mb <- round(file.info(f)$size / 1e6, 3)
message("File is: ", mb," MB")
}
widget_file_size(p)
widget_file_size(partial_bundle(p))
saveWidget(p, "p1.html", selfcontained = F, libdir = "lib")
htmltools::tags$iframe(
src = "p1.html",
scrolling = "no",
seamless = "seamless",
frameBorder = "0"
)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(widgetframe)
library(utils)
library(lubridate)
theme_set(theme_classic())
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",
na.strings = "", fileEncoding = "UTF-8-BOM")
colnames(data)
lbls <- paste0(month.abb[month(data$date)], " ", lubridate::year(data$date))
brks <- data$date
typeof(data$dateRep)
g <- ggplot(data, aes(x=as.Date(dateRep))) +
geom_line(aes(y=cases)) +
labs(title="Cases over time",
caption="Source: EUCDC",
y="Cases")
# + #Title & Caption
#   scale_x_date(labels = lbls,
#                breaks = brks)
p <- plotly::ggplotly(g)
widget_file_size <- function(p) {
d <- tempdir()
withr::with_dir(d, htmlwidgets::saveWidget(p, "index.html"))
f <- file.path(d, "index.html")
mb <- round(file.info(f)$size / 1e6, 3)
message("File is: ", mb," MB")
}
widget_file_size(p)
widget_file_size(partial_bundle(p))
saveWidget(p, "p1.html", selfcontained = F, libdir = "lib")
htmltools::tags$iframe(
src = "p1.html",
scrolling = "no",
seamless = "seamless",
frameBorder = "0"
)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(widgetframe)
library(utils)
library(lubridate)
theme_set(theme_classic())
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",
na.strings = "", fileEncoding = "UTF-8-BOM")
colnames(data)
lbls <- paste0(month.abb[month(data$date)], " ", lubridate::year(data$date))
brks <- data$date
typeof(data$dateRep)
g <- ggplot(data, aes(x=as.Date(dateRep))) +
geom_line(aes(y=cases)) +
labs(title="Cases over time",
caption="Source: EUCDC",
y="Cases")
p <- plotly::ggplotly(g)
widget_file_size <- function(p) {
d <- tempdir()
withr::with_dir(d, htmlwidgets::saveWidget(p, "index.html"))
f <- file.path(d, "index.html")
mb <- round(file.info(f)$size / 1e6, 3)
message("File is: ", mb," MB")
}
widget_file_size(p)
widget_file_size(partial_bundle(p))
saveWidget(p, "p1.html", selfcontained = F, libdir = "lib")
htmltools::tags$iframe(
src = "p1.html",
scrolling = "no",
seamless = "seamless",
frameBorder = "0"
)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(widgetframe)
library(utils)
library(lubridate)
theme_set(theme_classic())
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",
na.strings = "", fileEncoding = "UTF-8-BOM")
colnames(data)
lbls <- paste0(month.abb[month(data$date)], " ", lubridate::year(data$date))
brks <- data$date
typeof(data$dateRep)
g <- ggplot(data, aes(x=as.Date(dateRep))) +
geom_line(aes(y=cases)) +
labs(title="Cases over time",
caption="Source: EUCDC",
y="Cases")
# + #Title & Caption
#   scale_x_date(labels = lbls,
#                breaks = brks)
p <- plotly::ggplotly(g)
widget_file_size <- function(p) {
d <- tempdir()
withr::with_dir(d, htmlwidgets::saveWidget(p, "index.html"))
f <- file.path(d, "index.html")
mb <- round(file.info(f)$size / 1e6, 3)
message("File is: ", mb," MB")
}
widget_file_size(p)
widget_file_size(partial_bundle(p))
saveWidget(p, "p1.html", selfcontained = F, libdir = "lib")
htmltools::tags$iframe(
src = "p1.html",
scrolling = "no",
seamless = "seamless",
frameBorder = "0"
)
source('C:/Users/Daniel Le Compte/OneDrive/Documents/DecisiveAction-main/StatsAndVisualization/Script.R', echo=TRUE)
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(widgetframe)
library(utils)
library(lubridate)
theme_set(theme_classic())
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",
na.strings = "", fileEncoding = "UTF-8-BOM")
colnames(data)
lbls <- paste0(month.abb[month(data$date)], " ", lubridate::year(data$date))
brks <- data$date
typeof(data$dateRep)
g <- ggplot(data, aes(x=as.Date(dateRep))) +
geom_line(aes(y=cases)) +
labs(title="Cases over time",
caption="Source: EUCDC",
y="Cases")
# + #Title & Caption
#   scale_x_date(labels = lbls,
#                breaks = brks)
p <- plotly::ggplotly(g)
widget_file_size <- function(p) {
d <- tempdir()
withr::with_dir(d, htmlwidgets::saveWidget(p, "index.html"))
f <- file.path(d, "index.html")
mb <- round(file.info(f)$size / 1e6, 3)
message("File is: ", mb," MB")
}
widget_file_size(p)
widget_file_size(partial_bundle(p))
saveWidget(p, "p1.html", selfcontained = F, libdir = "lib")
htmltools::tags$iframe(
src = "p1.html",
scrolling = "no",
seamless = "seamless",
frameBorder = "0"
)
.libPaths("C:\Users\Daniel Le Compte\OneDrive\Documents\DecisiveAction-main\
StatsAndVisualizations\")
p <- plotly::ggplotly(g)
widget_file_size <- function(p) {
d <- tempdir()
withr::with_dir(d, htmlwidgets::saveWidget(p, "index.html"))
f <- file.path(d, "index.html")
mb <- round(file.info(f)$size / 1e6, 3)
message("File is: ", mb," MB")
}
widget_file_size(p)
widget_file_size(partial_bundle(p))
saveWidget(p, "p1.html", selfcontained = F, libdir = "lib")
htmltools::tags$iframe(
src = "p1.html",
scrolling = "no",
seamless = "seamless",
frameBorder = "0"
)
# p <- plot_ly(x = 1:10, y = 1:10) %>% add_markers()
# widget_file_size <- function(p) {
#   d <- tempdir()
#   withr::with_dir(d, htmlwidgets::saveWidget(p, "index.html"))
#   f <- file.path(d, "index.html")
#   mb <- round(file.info(f)$size / 1e6, 3)
#   message("File is: ", mb," MB")
# }
# widget_file_size(p)
# widget_file_size(partial_bundle(p))
# p
# saveWidget(p, "p1.html", selfcontained = F, libdir = "lib")
# htmltools::tags$iframe(
#   src = "p1.html",
#   scrolling = "no",
#   seamless = "seamless",
#   frameBorder = "0"
# )
.libPaths("C:\Users\Daniel Le Compte\OneDrive\Documents\DecisiveAction-main\
StatsAndVisualizations")
.libPaths("C:\users\Daniel Le Compte\OneDrive\Documents\DecisiveAction-main\
StatsAndVisualizations")
.libPaths("C:\users\Daniel Le Compte\OneDrive\Documents\DecisiveAction-main\
StatsAndVisualizations")
.libPaths("C:\users\Daniel Le Compte\OneDrive\Documents\DecisiveAction-main\StatsAndVisualizations")
setwd("C:/Users/Daniel Le Compte/OneDrive/Documents/DecisiveAction-main/StatsAndVisualization")
source('C:/Users/Daniel Le Compte/OneDrive/Documents/DecisiveAction-main/StatsAndVisualization/Script.R', echo=TRUE)
getwd()
dir()
source('C:/Users/Daniel Le Compte/OneDrive/Documents/DecisiveAction-main/StatsAndVisualization/Script.R', echo=TRUE)
source('C:/Users/Daniel Le Compte/OneDrive/Documents/DecisiveAction-main/StatsAndVisualization/Script.R', echo=TRUE)
source('C:/Users/Daniel Le Compte/OneDrive/Documents/DecisiveAction-main/StatsAndVisualization/Script.R', echo=TRUE)
source('C:/Users/Daniel Le Compte/OneDrive/Documents/DecisiveAction-main/StatsAndVisualization/Script.R', echo=TRUE)
source('C:/Users/Daniel Le Compte/OneDrive/Documents/DecisiveAction-main/StatsAndVisualization/Script.R', echo=TRUE)
source('C:/Users/Daniel Le Compte/OneDrive/Documents/DecisiveAction-main/StatsAndVisualization/Script.R', echo=TRUE)
source('C:/Users/Daniel Le Compte/OneDrive/Documents/DecisiveAction-main/StatsAndVisualization/Script.R', echo=TRUE)
source('C:/Users/Daniel Le Compte/OneDrive/Documents/DecisiveAction-main/StatsAndVisualization/Script.R', echo=TRUE)
save_leaflet <- function(p, file="p1.html", overwrite = FALSE){
# save the file if it doesn't already exist or if overwrite == TRUE
if( !file.exists(file) | overwrite ){
withr::with_dir(new = dirname(p1.html),
code = htmlwidgets::saveWidget(p,
file = basename(file)))
} else {
print("File already exists and 'overwrite' == FALSE. Nothing saved to file.")
}
}
save_leaflet
save_leaflet()
save_leaflet <- function(plot=p, file="p1.html", overwrite = FALSE){
# save the file if it doesn't already exist or if overwrite == TRUE
if( !file.exists(file) | overwrite ){
withr::with_dir(new = dirname(file),
code = htmlwidgets::saveWidget(plot,
file = basename(file)))
} else {
print("File already exists and 'overwrite' == FALSE. Nothing saved to file.")
}
}
save_leaflet()
save_leaflet <- function(plot=p, file="p1.html", overwrite = TRUE){
# save the file if it doesn't already exist or if overwrite == TRUE
if( !file.exists(file) | overwrite ){
withr::with_dir(new = dirname(file),
code = htmlwidgets::saveWidget(plot,
file = basename(file)))
} else {
print("File already exists and 'overwrite' == FALSE. Nothing saved to file.")
}
}
save_leaflet()
save_leaflet <- function(plot=p, file="p1.html", overwrite = TRUE){
# save the file if it doesn't already exist or if overwrite == TRUE
if( !file.exists(file) | overwrite ){
withr::with_dir(new = dirname(file),
code = htmlwidgets::saveWidget(plot,
file = basename(file)))
} else {
print("File already exists and 'overwrite' == FALSE. Nothing saved to file.")
}
}
save_leaflet()
save_leaflet <- function(plot=p, file="p1.html", overwrite = FALSE){
# save the file if it doesn't already exist or if overwrite == TRUE
if( !file.exists(file) | overwrite ){
withr::with_dir(new = dirname(file),
code = htmlwidgets::saveWidget(plot,
file = basename(file)))
} else {
print("File already exists and 'overwrite' == FALSE. Nothing saved to file.")
}
}
save_leaflet()
# saveWidget(p, file="p1.html", selfcontained = F, libdir = "C:\Users\Daniel Le Compte\OneDrive\Documents\DecisiveAction-main\StatsAndVisualizations\lib")
htmltools::tags$iframe(
src = "p1.html",
scrolling = "no",
seamless = "seamless",
frameBorder = "0"
)
getwd()
dir()
g <- ggplot(data, aes(x=as.Date(dateRep))) +
geom_line(aes(y=cases)) +
labs(title="Cases over time",
caption="Source: EUCDC",
y="Cases") + #Title & Caption
scale_x_date(labels = lbls,
breaks = brks)
p <- plotly::ggplotly(g)
# data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",
#                  na.strings = "", fileEncoding = "UTF-8-BOM")
colnames(data)
brks <- data$dateRep
typeof(data$dateRep)
data$date <- as.Date(data$dateRep)
typeof(data$date)
g <- ggplot(data, aes(x=as.Date(dateRep))) +
geom_line(aes(y=cases)) +
labs(title="Cases over time",
caption="Source: EUCDC",
y="Cases") + #Title & Caption
scale_x_date(labels = lbls,
breaks = brks)
brks <- data$date
g <- ggplot(data, aes(x=as.Date(dateRep))) +
geom_line(aes(y=cases)) +
labs(title="Cases over time",
caption="Source: EUCDC",
y="Cases") + #Title & Caption
scale_x_date(labels = lbls,
breaks = brks)
p <- plotly::ggplotly(g)
p
ggplot(economics, aes(x=date)) +
geom_line(aes(y=returns_perc)) +
labs(title="Time Series Chart",
subtitle="Returns Percentage from 'Economics' Dataset",
caption="Source: Economics",
y="Returns %")
# data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",
#                  na.strings = "", fileEncoding = "UTF-8-BOM")
economics
ggplot(economics, aes(x=date)) +
geom_line(aes(y=returns_perc)) +
labs(title="Time Series Chart",
subtitle="Returns Percentage from 'Economics' Dataset",
caption="Source: Economics",
y="Returns %")
ggplot(economics_m, aes(x=date)) +
geom_line(aes(y=returns_perc)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank())  # turn off minor grid
economics_m <- economics[1:24, ]
# labels and breaks for X axis text
lbls <- paste0(month.abb[month(economics_m$date)], " ", lubridate::year(economics_m$date))
brks <- economics_m$date
ggplot(economics_m, aes(x=date)) +
geom_line(aes(y=returns_perc)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %") +  # title and caption
scale_x_date(labels = lbls,
breaks = brks) +  # change to monthly ticks and labels
theme(axis.text.x = element_text(angle = 90, vjust=0.5),  # rotate x axis text
panel.grid.minor = element_blank())  # turn off minor grid
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(widgetframe)
library(utils)
library(lubridate)
theme_set(theme_classic())
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",
na.strings = "", fileEncoding = "UTF-8-BOM")
colnames(data)
lbls <- paste0(month.abb[month(data$date)], " ", lubridate::year(data$date))
brks <- data$date
typeof(data$dateRep)
data$date <- as.Date(data$dateRep)
typeof(data$date)
g <- ggplot(data, aes(x=as.Date(dateRep))) +
geom_line(aes(y=cases)) +
labs(title="Cases over time",
caption="Source: EUCDC",
y="Cases") + #Title & Caption
scale_x_date(labels = lbls,
breaks = brks)
p <- plotly::ggplotly(g)
p
# Not totally sure, but this function will test if the plot and file are there
# If not, will write. Will overwrite if some other thing is true?
save_leaflet <- function(plot=p, file="p1.html", overwrite = FALSE){
# save the file if it doesn't already exist or if overwrite == TRUE
if( !file.exists(file) | overwrite ){
withr::with_dir(new = dirname(file),
code = htmlwidgets::saveWidget(plot,
file = basename(file)))
} else {
print("File already exists and 'overwrite' == FALSE. Nothing saved to file.")
}
}
save_leaflet()
# saveWidget(p, file="p1.html", selfcontained = F, libdir = "C:\Users\Daniel Le Compte\OneDrive\Documents\DecisiveAction-main\StatsAndVisualizations\lib")
htmltools::tags$iframe(
src = "p1.html",
scrolling = "no",
seamless = "seamless",
frameBorder = "0"
)
lbls <- paste0(month.abb[day(data$date)], " ", lubridate::month(data$date))
brks <- data$date
typeof(data$dateRep)
data$date <- as.Date(data$dateRep)
typeof(data$date)
g <- ggplot(data, aes(x=as.Date(dateRep))) +
geom_line(aes(y=cases)) +
labs(title="Cases over time",
caption="Source: EUCDC",
y="Cases") + #Title & Caption
scale_x_date(labels = lbls,
breaks = brks)
p <- plotly::ggplotly(g)
# Not totally sure, but this function will test if the plot and file are there
# If not, will write. Will overwrite if some other thing is true?
save_leaflet <- function(plot=p, file="p1.html", overwrite = FALSE){
# save the file if it doesn't already exist or if overwrite == TRUE
if( !file.exists(file) | overwrite ){
withr::with_dir(new = dirname(file),
code = htmlwidgets::saveWidget(plot,
file = basename(file)))
} else {
print("File already exists and 'overwrite' == FALSE. Nothing saved to file.")
}
}
save_leaflet()
p
library(ggplot2)
library(plotly)
library(htmlwidgets)
library(widgetframe)
library(utils)
library(lubridate)
theme_set(theme_classic())
# data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",
#                  na.strings = "", fileEncoding = "UTF-8-BOM")
colnames(data)
lbls <- paste0(month.abb[month(data$date)], " ", lubridate::year(data$date))
brks <- data$date
typeof(data$dateRep)
data$date <- as.Date(data$dateRep)
typeof(data$date)
g <- ggplot(data, aes(x=as.Date(date))) +
geom_line(aes(y=cases)) +
labs(title="Cases over time",
caption="Source: EUCDC",
y="Cases") + #Title & Caption
scale_x_date(labels = lbls,
breaks = brks)
# .libPaths("C:\users\Daniel Le Compte\OneDrive\Documents\DecisiveAction-main\StatsAndVisualizations")
p <- plotly::ggplotly(g)
p
lbls <- paste0(month.abb[month(data$date)]) #, " ", lubridate::year(data$date)
brks <- data$date
lbls
typeof(data$dateRep)
data$date <- as.Date(data$dateRep)
typeof(data$date)
g <- ggplot(data, aes(x=as.Date(date))) +
geom_line(aes(y=cases)) +
labs(title="Cases over time",
caption="Source: EUCDC",
y="Cases") + #Title & Caption
scale_x_date(labels = lbls,
breaks = brks)
p <- plotly::ggplotly(g)
p
data$dateRep
typeof(data$dateRep)
g <- ggplot(data, aes(x=as.Date(date))) +
geom_line(aes(y=cases)) +
labs(title="Cases over time",
caption="Source: EUCDC",
y="Cases") + #Title & Caption
scale_x_date(labels = lbls,
breaks = brks)
p <- plotly::ggplotly(g)
p
# data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",
#                  na.strings = "", fileEncoding = "UTF-8-BOM")
colnames(data)
lbls <- paste0(month.abb[month(data$dateRep)]) #, " ", lubridate::year(data$date)
brks <- data$date
typeof(data$dateRep)
typeof(lbls)
typeof(brks)
brks <- data$dateRep
typeof(data$dateRep)
typeof(lbls)
typeof(brks)
